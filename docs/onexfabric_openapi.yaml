components:
  responses: {}
  schemas:
    GlobalNamedObject:
      type: object
      properties:
        name:
          description: |-
            Unique identifier for an object
          type: string
          format: global-unique
    Error.Details:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error.Item'
    Warning.Details:
      type: object
      properties:
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/Error.Item'
    Error.Item:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
        detail:
          type: string
    Config:
      type: object
      properties:
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/Host'
        fabric:
          $ref: '#/components/schemas/Fabric'
    Host:
      required:
      - address
      - name
      properties:
        name:
          description: |-
            The name, uniquely identifying the host
          type: string
        address:
          description: |-
            The test address of the host
          type: string
        prefix:
          description: |-
            The prefix of the host
          type: integer
          default: 24
        l1_profile_name:
          description: |
            The layer 1 settings profile associated with the host/front panel port.

            x-constraint:
            - ../l1_profiles.yaml#/components/schemas/L1SettingsProfile/properties/name
          type: string
          x-constraint:
          - ../l1_profiles.yaml#/components/schemas/L1SettingsProfile/properties/name
    Fabric:
      type: object
      properties:
        choice:
          type: string
          enum:
          - clos
        clos:
          $ref: '#/components/schemas/Fabric.Clos'
        qos_profiles:
          description: |-
            A list of Quality of Service (QoS) profiles
          type: array
          items:
            $ref: '#/components/schemas/Fabric.QosProfile'
    Fabric.Clos:
      description: "An emulation of a multistage switch topology. When folded, results\
        \ in a topology with (up to) 3 tiers identified as \nspine, pod and tor tier."
      type: object
      properties:
        spine:
          $ref: '#/components/schemas/Fabric.Spine'
        pods:
          description: |-
            The pods in the topology.
          type: array
          items:
            $ref: '#/components/schemas/Fabric.Pod'
        host_links:
          type: array
          items:
            $ref: '#/components/schemas/SwitchHostLink'
        pod_profiles:
          description: |-
            A list of pod profiles
          type: array
          items:
            $ref: '#/components/schemas/Fabric.PodProfile'
        tor_profiles:
          description: |-
            A list of ToR switch profiles
          type: array
          items:
            $ref: '#/components/schemas/Fabric.TorProfile'
        parallel_fabric_count:
          description: "Number of parallel fabrics (aka fabric colors). Spine and\
            \ pod switches \nare fully meshed within a fabric"
          type: integer
          default: 1
    Fabric.Spine:
      type: object
      properties:
        count:
          description: |-
            The number of spines to be created with each spine sharing the same
            downlink_ecmp_mode and qos_profile_name properties.
          type: integer
          default: 1
        downlink_ecmp_mode:
          description: "The algorithm for packet distribution over ECMP links.\n-\
            \ random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple\
            \ is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4\
            \ but a different resulting RTAG7 hash mode"
          type: string
          enum:
          - random_spray
          - hash_3_tuple
          - hash_5_tuple
        qos_profile_name:
          description: |
            The name of a qos profile shared by the spines.

            x-constraint:
            - #/components/schemas/QosProfile/properties/name
          type: string
          x-constraint:
          - '#/components/schemas/QosProfile/properties/name'
    Fabric.Pod:
      type: object
      properties:
        count:
          description: |-
            The number of pods that will share the same profile
          type: integer
          default: 1
        pod_profile_name:
          description: |
            The pod profile associated with the pod(s).

            x-constraint:
            - #/components/schemas/PodProfile/properties/name
          type: string
          x-constraint:
          - '#/components/schemas/PodProfile/properties/name'
    Fabric.PodProfile:
      type: object
      properties:
        name:
          description: |-
            Uniquely identifies a pod profile
          type: string
        pod_switch:
          $ref: '#/components/schemas/Fabric.PodSwitch'
        tors:
          description: |-
            The ToRs in the pod
          type: array
          items:
            $ref: '#/components/schemas/Fabric.Tor'
        pod_to_spine_oversubscription:
          description: |-
            Oversubscription ratio of the pod switches
          type: string
    Fabric.PodSwitch:
      type: object
      properties:
        count:
          type: integer
          default: 1
        uplink_ecmp_mode:
          description: "The algorithm for packet distribution over ECMP links.\n-\
            \ random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple\
            \ is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4\
            \ but a different resulting RTAG7 hash mode"
          type: string
          enum:
          - random_spray
          - hash_3_tuple
          - hash_5_tuple
        downlink_ecmp_mode:
          description: "The algorithm for packet distribution over ECMP links.\n-\
            \ random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple\
            \ is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4\
            \ but a different resulting RTAG7 hash mode"
          type: string
          enum:
          - random_spray
          - hash_3_tuple
          - hash_5_tuple
        qos_profile_name:
          description: |
            The name of a qos profile associated with the switches in this pod.

            x-constraint:
            - #/components/schemas/QosProfile/properties/name
          type: string
          x-constraint:
          - '#/components/schemas/QosProfile/properties/name'
    Fabric.Tor:
      type: object
      properties:
        count:
          type: integer
          description: |-
            number of ToR switches that will share the same profile
          default: 1
        tor_profile_name:
          description: |
            The names of ToR profiles associated with the ToR switch(es)

            x-constraint:
            - #/components/schemas/TorProfile/properties/name
          type: string
          x-constraint:
          - '#/components/schemas/TorProfile/properties/name'
    Fabric.TorProfile:
      type: object
      properties:
        name:
          type: string
        tor_mode:
          description: |-
            ToR switch mode
          type: string
          enum:
          - layer2
          - layer3
        uplink_ecmp_mode:
          description: "The algorithm for packet distribution over ECMP links.\n-\
            \ random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple\
            \ is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4\
            \ but a different resulting RTAG7 hash mode"
          type: string
          enum:
          - random_spray
          - hash_3_tuple
          - hash_5_tuple
        qos_profile_name:
          description: |
            The name of a qos profile associated with the ToR switch(es)

            x-constraint:
            - #/components/schemas/QosProfile/properties/name
          type: string
          x-constraint:
          - '#/components/schemas/QosProfile/properties/name'
        tor_to_pod_oversubscription:
          description: |-
            The oversubscription ratio of the ToR switch(es)
          type: string
    Fabric.QosProfile:
      type: object
      required:
      - name
      properties:
        name:
          type: string
        ingress_admission:
          $ref: '#/components/schemas/Fabric.QosProfile.IngressAdmission'
        scheduler:
          $ref: '#/components/schemas/Fabric.QosProfile.Scheduler'
        packet_classification:
          $ref: '#/components/schemas/Fabric.QosProfile.PacketClassification'
        wred:
          $ref: '#/components/schemas/Fabric.QosProfile.Wred'
    Fabric.QosProfile.IngressAdmission:
      type: object
      properties:
        reserved_buffer_bytes:
          description: |-
            Buffer space (in bytes) reserved for each port that this Qos profile applies to
          type: integer
          default: 0
        shared_buffer_bytes:
          description: |-
            Amount of shared buffer space (in bytes) available
          type: integer
          default: 0
        priority_list:
          description: |-
            List of priorities for which the buffer sizes should be applied
          type: array
          items:
            type: string
            default: '0'
    Fabric.QosProfile.Scheduler:
      type: object
      properties:
        scheduler_mode:
          description: "The queue scheduling discipline "
          type: string
          enum:
          - strict_priority
          - weighted_round_robin
        weight_list:
          description: |-
            A list of egress queue weights for weighted round robin scheduler mode
          type: array
          items:
            type: integer
    Fabric.QosProfile.PacketClassification:
      type: object
      properties:
        map_dscp_to_traffic_class:
          $ref: '#/components/schemas/Fabric.QosProfile.PacketClassification.Map'
        map_traffic_class_to_queue:
          $ref: '#/components/schemas/Fabric.QosProfile.PacketClassification.Map'
    Fabric.QosProfile.PacketClassification.Map:
      type: object
      additionalProperties:
        type: string
    Fabric.QosProfile.Wred:
      description: |-
        WRED (weighted random early detection) configuration
      type: object
      properties:
        queue_list:
          description: |-
            List of queues for which WRED is enabled
          type: array
          items:
            type: string
            default: '0'
        ecn_marking_enabled:
          type: boolean
          default: false
        min_threshold_bytes:
          description: |-
            Egress queue threshold beyond which packets will be droppes or marked
          type: integer
          default: 1
        max_threshold_bytes:
          description: |-
            Egress queue threshold beyond which packets will be droppes or marked
          type: integer
          default: 2
        max_probability_percent:
          description: |-
            Probability of dropping/marking packets at max threshold
          type: integer
          default: 100
    SwitchHostLink:
      type: object
      description: |-
        The ingress point of a host which is the index of a spine, pod or tor switch.
      required:
      - host_name
      properties:
        host_name:
          type: string
          x-constraint:
          - '#components/schemas/Host/properties/name'
          description: |
            TBD

            x-constraint:
            - #components/schemas/Host/properties/name
        host_type:
          description: |-
            Optional host type, if fabric is rendered on physical box.
            - external for hosts/servers physically connected to front panel ports
            - internal_traffic_sink for an emulated server that acts as a traffic sink (i.e. packets sent to its IP address will be routed through the emulated fabric)
          type: string
          enum:
          - external
          - internal_traffic_sink
          default: external
        front_panel_port:
          type: integer
          description: |-
            Optional front panel port number, if fabric is rendered on physical box
        choice:
          type: string
          enum:
          - spine
          - pod
          - tor
          default: tor
        spine:
          description: "One based index of the spine switch based on the number of\
            \ spines \nconfigured in the clos topology."
          type: integer
          minimum: 1
        pod:
          $ref: '#/components/schemas/SwitchHostLink.SwitchRef'
        tor:
          $ref: '#/components/schemas/SwitchHostLink.SwitchRef'
    SwitchHostLink.SwitchRef:
      description: |-
        Location of the switch based on pod and switch index
      type: object
      properties:
        pod_index:
          description: |-
            One-based index of the pod based on the number of pods in the fabric
          type: integer
          default: 1
          minimum: 1
        switch_index:
          description: |-
            One-based index of the pod or ToR switch in the indicated pod
          type: integer
          default: 1
          minimum: 1
openapi: 3.0.3
info:
  title: ONEx Fabric API
  description: |-
    The Open Network Experiments Fabric API and Data Models
  version: 0.0.1
  contact:
    x-info: "Any feedback such as bugs/enhancements/questions regarding the \nFabric\
      \ API and Data models is welcomed by using the contact url."
    url: https://github.com/open-network-experiments/issues
  license:
    name: MIT
servers:
- url: https://{hostname}:{port}/{basePath}
  variables:
    hostname:
      default: 0.0.0.0
    port:
      default: '443'
    basePath:
      default: /onex/api/v1/fabric
paths:
  /config:
    post:
      tags:
      - Configuration
      operationId: set_config
      description: |-
        Sets the fabric configuration.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '400':
          description: |-
            error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '500':
          description: |-
            error 5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '200':
          description: |-
            Success with possible warnings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warning.Details'
    get:
      tags:
      - Configuration
      operationId: get_config
      description: |-
        Gets the fabric configuration.
      responses:
        '200':
          description: |-
            The current configured fabric configuration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          description: |-
            error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '500':
          description: |-
            error 5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
