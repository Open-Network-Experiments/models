components:
  responses: {}
  schemas:
    GlobalNamedObject:
      type: object
      properties:
        name:
          description: |-
            Unique identifier for an object
          type: string
          format: global-unique
    Error.Details:
      type: object
      properties:
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error.Item'
    Warning.Details:
      type: object
      properties:
        warnings:
          type: array
          items:
            $ref: '#/components/schemas/Error.Item'
    Error.Item:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer
        detail:
          type: string
    Config:
      description: |-
        ONEx dataflow configuration
      type: object
      properties:
        hosts:
          type: array
          items:
            $ref: '#/components/schemas/Host'
        dataflow:
          $ref: '#/components/schemas/Dataflow'
    GetConfigDetails:
      description: |-
        Get config request details
      type: object
    Experiment.Request:
      description: |-
        Experiment request details
      type: object
    Control.Start.Request:
      description: |-
        Start request details
      type: object
    Control.Status.Request:
      description: |-
        control.state request details
      type: object
    Control.Status.Response:
      description: |-
        control/state response details
      type: object
      properties:
        dataflow_status:
          description: |-
            dataflow status:
            started - data flow traffic is running
            completed - all traffic flows completed, metrics are available
            error - an error occurred
          type: string
          enum:
          - started
          - completed
          - error
        errors:
          type: array
          items:
            $ref: '#/components/schemas/Error.Item'
    Metrics.Request:
      description: |-
        Metrics request details
      type: object
    Metrics.Response:
      description: |-
        Metrics response details
      type: object
      properties:
        jct:
          description: |-
            job completion time in micro seconds
          type: integer
          format: int64
        flow_results:
          type: array
          items:
            $ref: '#/components/schemas/Metrics.Response.FlowResult'
    Metrics.Response.FlowResult:
      description: |-
        result for a single data flow
      properties:
        workload_name:
          type: string
        from_host_name:
          type: string
        to_host_name:
          type: string
        fct:
          type: integer
          format: int64
          description: |-
            flow completion time in micro seconds
        first_timestamp:
          type: integer
          format: int64
          description: |-
            first timestamp in micro seconds
        last_timestamp:
          type: integer
          format: int64
          description: |-
            last timestamp in micro seconds
        bytes_tx:
          type: integer
          format: int64
          description: |-
            bytes transmitted from src to dst
        bytes_rx:
          type: integer
          format: int64
          description: |-
            bytes received by src from dst
        tcp_info_initiator:
          $ref: '#/components/schemas/Metrics.Response.FlowResult.TcpInfo'
        tcp_info_responder:
          $ref: '#/components/schemas/Metrics.Response.FlowResult.TcpInfo'
    Metrics.Response.FlowResult.TcpInfo:
      type: object
      description: |-
        TCP information for this flow
      properties:
        rtt:
          type: integer
          format: int64
          description: |-
            average round trip time in microseconds
        rtt_variance:
          type: integer
          format: int64
          description: |-
            round trip time variance in microseconds, larger values indicate less stable performance
        retransmissions:
          type: integer
          format: int64
          description: |-
            total number of TCP retransmissions
        retransmission_timeout:
          type: integer
          format: int64
          description: |-
            retransmission timeout in micro seconds
        congestion_window:
          type: integer
          format: int64
          description: |-
            congestion windows size in bytes
        slow_start_threshold:
          type: integer
          format: int64
          description: |-
            slow start threshold in bytes (max int64 value when wide open)
        path_mtu:
          type: integer
          format: int64
          description: |-
            path MTU
    Host:
      required:
      - address
      - name
      properties:
        name:
          description: |-
            The name, uniquely identifying the host
          type: string
        address:
          description: |-
            The test address of the host
          type: string
        prefix:
          description: |-
            The prefix of the host
          type: integer
          default: 24
        l1_profile_name:
          description: |
            The layer 1 settings profile associated with the host/front panel port.

            x-constraint:
            - ../l1_profiles.yaml#/components/schemas/L1SettingsProfile/properties/name
          type: string
          x-constraint:
          - ../l1_profiles.yaml#/components/schemas/L1SettingsProfile/properties/name
    Dataflow:
      type: object
      properties:
        host_management:
          type: array
          items:
            $ref: '#/components/schemas/Dataflow.HostManagement'
        workload:
          description: |-
            The workload items making up the dataflow
          type: array
          items:
            $ref: '#/components/schemas/Dataflow.WorkloadItem'
        flow_profiles:
          description: |-
            foo
          type: array
          items:
            $ref: '#/components/schemas/Dataflow.FlowProfile'
    Dataflow.FlowProfile:
      type: object
      required:
      - name
      - data_size
      properties:
        name:
          type: string
        data_size:
          type: integer
        l2_protocol_choice:
          description: |-
            layer2 protocol selection
          type: string
          enum:
          - ethernet
        ethernet:
          $ref: '#/components/schemas/Dataflow.FlowProfile.Ethernet'
        l4_protocol_choice:
          description: |-
            layer4 protocol selection
          type: string
          enum:
          - tcp
          - udp
        ip:
          $ref: '#/components/schemas/Dataflow.FlowProfile.Ip'
        tcp:
          $ref: '#/components/schemas/Dataflow.FlowProfile.Tcp'
        udp:
          $ref: '#/components/schemas/Dataflow.FlowProfile.Udp'
    Dataflow.FlowProfile.Ethernet:
      type: object
      properties:
        mtu:
          type: integer
          description: |-
            Maximum Transmission Unit
          default: 1500
    Dataflow.FlowProfile.Ip:
      type: object
      properties:
        dscp:
          type: integer
          description: |-
            differentiated services code point
    Dataflow.FlowProfile.Tcp:
      type: object
      properties:
        congestion_algorithm:
          default: cubic
          description: |-
            The TCP congestion algorithm:
            bbr - Bottleneck Bandwidth and Round-trip propagation time
            dctcp - Data center TCP
            cubic - cubic window increase function
            reno - TCP New Reno
          type: string
          enum:
          - bbr
          - dctcp
          - cubic
          - reno
        initcwnd:
          description: |-
            initial congestion window
          type: integer
        send_buf:
          description: |-
            send buffer size
          type: integer
        receive_buf:
          description: |-
            receive buffer size
          type: integer
        delayed_ack:
          description: |-
            delayed acknowledgment
          type: integer
        selective_ack:
          description: |-
            selective acknowledgment
          type: boolean
        min_rto:
          description: |-
            minimum retransmission timeout
          type: integer
        mss:
          type: integer
          description: |-
            Maximum Segment Size
          default: 1500
        ecn:
          description: |-
            early congestion notification
          type: boolean
        enable_timestamp:
          description: |-
            enable tcp timestamping
          type: boolean
        destination_port:
          $ref: '#/components/schemas/L4PortRange'
        source_port:
          $ref: '#/components/schemas/L4PortRange'
    L4PortRange:
      description: |-
        Layer4 protocol source or destination port values
      type: object
      properties:
        choice:
          description: |-
            None
          type: string
          enum:
          - single_value
          - range
        single_value:
          $ref: '#/components/schemas/L4PortRange.SingleValue'
        range:
          $ref: '#/components/schemas/L4PortRange.Range'
    L4PortRange.SingleValue:
      type: object
      properties:
        value:
          type: integer
          default: 1
    L4PortRange.Range:
      type: object
      properties:
        start_value:
          type: integer
          default: 1
        increment:
          type: integer
          default: 1
          minimum: 1
    Dataflow.FlowProfile.Udp:
      type: object
    Dataflow.WorkloadItem:
      type: object
      required:
      - name
      - choice
      properties:
        name:
          description: |-
            uniquely identifies the workload item
          type: string
        choice:
          description: |-
            The type of workflow item
          type: string
          enum:
          - scatter
          - gather
          - all_reduce
          - loop
          - compute
          - broadcast
          - all_to_all
        scatter:
          $ref: '#/components/schemas/Dataflow.ScatterWorkload'
        gather:
          $ref: '#/components/schemas/Dataflow.GatherWorkload'
        loop:
          $ref: '#/components/schemas/Dataflow.LoopWorkload'
        compute:
          $ref: '#/components/schemas/Dataflow.ComputeWorkload'
        all_reduce:
          $ref: '#/components/schemas/Dataflow.AllReduceWorkload'
        broadcast:
          $ref: '#/components/schemas/Dataflow.BroadcastWorkload'
        all_to_all:
          $ref: '#/components/schemas/Dataflow.AlltoallWorkload'
    Dataflow.ScatterWorkload:
      type: object
      properties:
        sources:
          description: |-
            list of host names, indicating the originator of the data
          type: array
          items:
            type: string
        destinations:
          description: |-
            list of host names, indicating the destination of the data
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string
    Dataflow.BroadcastWorkload:
      type: object
      properties:
        sources:
          description: |-
            list of host names, indicating the originator of the data
          type: array
          items:
            type: string
        destinations:
          description: |-
            list of host names, indicating the destination of the data
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string
    Dataflow.GatherWorkload:
      type: object
      properties:
        sources:
          description: |-
            list of host names, indicating the originator of the data
          type: array
          items:
            type: string
        destinations:
          description: |-
            list of host names, indicating the destination of the data
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string
    Dataflow.AllReduceWorkload:
      type: object
      properties:
        nodes:
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string
        type:
          description: |-
            type of all reduce
          type: string
          enum:
          - ring
          - tree
          - butterfly
          default: ring
    Dataflow.AlltoallWorkload:
      type: object
      description: |-
        creates full-mesh flows between all nodes
      properties:
        nodes:
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string
    Dataflow.ComputeWorkload:
      type: object
      properties:
        nodes:
          type: array
          items:
            type: string
        choice:
          description: |-
            type of compute
          type: string
          enum:
          - simulated
        simulated:
          $ref: '#/components/schemas/Dataflow.SimulatedComputeWorkload'
    Dataflow.SimulatedComputeWorkload:
      type: object
      properties:
        duration:
          description: |-
            duration of the simulated compute workload in seconds
          type: number
    Dataflow.LoopWorkload:
      type: object
      properties:
        iterations:
          description: |-
            number of iterations in the loop
          type: integer
        children:
          description: |-
            list of workload items that are executed in this loop
          type: array
          items:
            $ref: '#/components/schemas/Dataflow.WorkloadItem'
    Dataflow.HostManagement:
      type: object
      description: |-
        auxillary host information needed to run dataflow experiments
      required:
      - host_name
      properties:
        host_name:
          type: string
          x-constraint:
          - '#components/schemas/Host/properties/name'
          description: |
            TBD

            x-constraint:
            - #components/schemas/Host/properties/name
        nic_rx_buffer:
          type: integer
          description: |-
            RX buffer size in bytes
        nic_tx_buffer:
          type: integer
          description: |-
            TX buffer size in bytes
        nic_speed:
          type: integer
          description: |-
            configured link speed Mbps (e.g. 100000 for 100G)
        management_address:
          type: string
          description: |-
            Hostname or address of management interface of a server running dataflow traffic
        nic_name:
          type: string
          description: |-
            unique idenfier for the network interface card (nic), e.g. "eth1"
openapi: 3.0.3
info:
  title: Distributed System Emulator Dataflow API and Data Models
  description: |-
    The Dataflow API and Data Models
  version: 0.0.1
  contact:
    x-info: "Any feedback such as bugs/enhancements/questions regarding the \nDataflow\
      \ API and Data models is welcomed by using the contact url."
    url: https://github.com/distributed-system-emulator/issues
  license:
    x-info: "The license url will be used by OpenApiArt to add that content into \n\
      generated artifacts."
    name: MIT
    url: https://raw.githubusercontent.com/distributed-system-emulator/main/LICENSE
servers:
- url: https://{hostname}:{port}/{basePath}
  variables:
    hostname:
      default: 0.0.0.0
    port:
      default: '443'
    basePath:
      default: /onex/api/v1/dataflow
paths:
  /config:
    post:
      tags:
      - Configuration
      operationId: set_config
      description: |-
        Sets the ONEx dataflow config
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Config'
      responses:
        '200':
          description: |-
            Current ONEx dataflow configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          description: |-
            error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '500':
          description: |-
            error 5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
    get:
      tags:
      - Configuration
      operationId: get_config
      description: |-
        Gets the ONEx dataflow config from the server, as currently configured
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetConfigDetails'
      responses:
        '200':
          description: |-
            Current ONEx dataflow configuration
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Config'
        '400':
          description: |-
            error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '500':
          description: |-
            error 5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
  /control/experiment:
    post:
      tags:
      - Control
      operationId: run_experiment
      description: |-
        Runs the currently configured experiment
      deprecated: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Experiment.Request'
      responses:
        '400':
          description: |-
            error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '500':
          description: |-
            error 5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '200':
          description: |-
            Success with possible warnings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warning.Details'
  /control/start:
    post:
      tags:
      - Control
      operationId: start
      description: |-
        Starts the currently configured experiment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Control.Start.Request'
      responses:
        '400':
          description: |-
            error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '500':
          description: |-
            error 5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '200':
          description: |-
            Success with possible warnings
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Warning.Details'
  /control/status:
    get:
      tags:
      - Control
      operationId: get_status
      description: |-
        Gets the control status (e.g. started/completed/error)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Control.Status.Request'
      responses:
        '200':
          description: |-
            Control status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Control.Status.Response'
        '400':
          description: |-
            error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '500':
          description: |-
            error 5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
  /results/metrics:
    description: |-
      Metrics API
    post:
      tags:
      - Metrics
      operationId: get_metrics
      requestBody:
        description: |-
          Request to obtain experiment metrics
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Metrics.Request'
      responses:
        '200':
          description: |-
            Experiment metrics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Metrics.Response'
        '400':
          description: |-
            error 4xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
        '500':
          description: |-
            error 5xx
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error.Details'
