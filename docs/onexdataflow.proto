// Distributed System Emulator Dataflow API and Data Models 0.0.1
// License: MIT

syntax = "proto3";

package onexdataflow;

option go_package = "github.com/ajbalogh/open-network-experiments/artifacts/godataflow/onexdataflow";

import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";

message OpenApiMsgOpt {
  string description = 10;
}
extend google.protobuf.MessageOptions {
  optional OpenApiMsgOpt msg_meta = 60001;
}

message OpenApiFldOpt {
  string default = 10;
  string description = 20;
}
extend google.protobuf.FieldOptions {
  optional OpenApiFldOpt fld_meta = 60002;
}

message OpenApiSvcOpt {
  string description = 10;
}
extend google.protobuf.ServiceOptions {
  optional OpenApiSvcOpt svc_meta = 60003;
}

message OpenApiRpcOpt {
  string description = 10;
}
extend google.protobuf.MethodOptions {
  optional OpenApiRpcOpt rpc_meta = 60004;
}

message ErrorDetails {
  option (msg_meta).description = "Description missing in models";

  repeated string errors = 1 [
    (fld_meta).description = "Description missing in models"
  ];
}

message WarningDetails {
  option (msg_meta).description = "Description missing in models";

  repeated string warnings = 1 [
    (fld_meta).description = "Description missing in models"
  ];
}

message Config {
  option (msg_meta).description = "The resources that define a dataflow configuration. ";

  repeated Host hosts = 1 [
    (fld_meta).description = "A list of hosts"
  ];

  repeated FlowProfile flow_profiles = 2 [
    (fld_meta).description = "A list of host flow profiles"
  ];

  repeated Activity workload = 3 [
    (fld_meta).description = "A list of activities that make up a workload."
  ];
}

message Host {
  option (msg_meta).description = "Description missing in models";

  string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  string ipv4_address = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  optional string ipv6_address = 3 [
    (fld_meta).description = "Description missing in models"
  ];
}

message Activity {
  option (msg_meta).description = "Description missing in models";

  message Choice {
    enum Enum {
      unspecified = 0;
      many = 1;
      compute = 2;
    }
  }
  Choice.Enum choice = 1 [
    (fld_meta).description = "The type of dataflow activity."
  ];

  optional ManyActivity many = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  optional ComputeActivity compute = 3 [
    (fld_meta).description = "Description missing in models"
  ];
}

message ManyActivity {
  option (msg_meta).description = "System MUST create flows between sources and destinations";

  string flow_profile_name = 1 [
    (fld_meta).description = "TBD\n\nx-constraint:\n- #/components/schemas/FlowProfile/properties/name\n"
  ];

  optional string parent_name = 2 [
    (fld_meta).description = "Used to create a graph of dataflow activities.\nThe name of a parent activity which determines its position in the \ngraph of activities.\nThere can be only one activity with a missing or empty parent_name\nand all other activities must point to at least one named Activity.\n\nx-constraint:\n- #/components/schemas/Activity/properties/name\n"
  ];

  message ChildExecution {
    enum Enum {
      unspecified = 0;
      parallel = 1;
      sequential = 2;
    }
  }
  optional ChildExecution.Enum child_execution = 3 [
    (fld_meta).default = "ChildExecution.Enum.sequential",
    (fld_meta).description = "All activities whose parent_name points to this activity will be \nexecuted according to this property."
  ];

  optional string name = 4 [
    (fld_meta).description = "Unique identifier for an object"
  ];

  repeated string sources = 5 [
    (fld_meta).description = "A list of host names that will send"
  ];

  repeated string destinations = 6 [
    (fld_meta).description = "A list of host names that will receive"
  ];
}

message ComputeActivity {
  option (msg_meta).description = "System MUST create compute activity between sources and destinations";

  optional int32 duration_ms = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "Description missing in models"
  ];

  optional string parent_name = 2 [
    (fld_meta).description = "Used to create a graph of dataflow activities.\nThe name of a parent activity which determines its position in the \ngraph of activities.\nThere can be only one activity with a missing or empty parent_name\nand all other activities must point to at least one named Activity.\n\nx-constraint:\n- #/components/schemas/Activity/properties/name\n"
  ];

  message ChildExecution {
    enum Enum {
      unspecified = 0;
      parallel = 1;
      sequential = 2;
    }
  }
  optional ChildExecution.Enum child_execution = 3 [
    (fld_meta).default = "ChildExecution.Enum.sequential",
    (fld_meta).description = "All activities whose parent_name points to this activity will be \nexecuted according to this property."
  ];

  optional string name = 4 [
    (fld_meta).description = "Unique identifier for an object"
  ];
}

message FlowProfile {
  option (msg_meta).description = "Description missing in models";

  string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional bool ipv6 = 2 [
    (fld_meta).default = "False",
    (fld_meta).description = "Use ipv6 addresses"
  ];

  optional IpParameters ip = 3 [
    (fld_meta).description = "Description missing in models"
  ];

  message Choice {
    enum Enum {
      unspecified = 0;
      tcp = 1;
      udp = 2;
    }
  }
  optional Choice.Enum choice = 4 [
    (fld_meta).default = "Choice.Enum.tcp",
    (fld_meta).description = "Description missing in models"
  ];

  optional TcpParameters tcp = 5 [
    (fld_meta).description = "Description missing in models"
  ];

  optional UdpParameters udp = 6 [
    (fld_meta).description = "Description missing in models"
  ];
}

message IpParameters {
  option (msg_meta).description = "Description missing in models";

  optional int32 mss = 1 [
    (fld_meta).default = "0",
    (fld_meta).description = "The maximum segment size"
  ];

  optional int32 initcwnd = 2 [
    (fld_meta).default = "0",
    (fld_meta).description = "The maximum initial congestion window size in MSS of a TCP connection."
  ];

  optional int32 mtu = 3 [
    (fld_meta).default = "0",
    (fld_meta).description = "The maximum transmission unit"
  ];

  optional int32 tos = 4 [
    (fld_meta).default = "0",
    (fld_meta).description = "The type of service"
  ];
}

message UdpParameters {
  option (msg_meta).description = "Description missing in models";

  int32 src_port = 1 [
    (fld_meta).description = "The source port"
  ];

  int32 dst_port = 2 [
    (fld_meta).description = "The source port"
  ];
}

message TcpParameters {
  option (msg_meta).description = "Description missing in models";

  int32 src_port = 1 [
    (fld_meta).description = "The source port"
  ];

  int32 dst_port = 2 [
    (fld_meta).description = "The source port"
  ];

  optional int32 mss = 3 [
    (fld_meta).default = "1460",
    (fld_meta).description = "maximum segment size"
  ];

  optional int32 sndbuf = 4 [
    (fld_meta).default = "131072",
    (fld_meta).description = "send buffer"
  ];

  optional int32 rcvbuf = 5 [
    (fld_meta).default = "131072",
    (fld_meta).description = "receive buffer"
  ];

  optional int32 delack = 6 [
    (fld_meta).default = "4",
    (fld_meta).description = "delayed acknowledgements in milliseconds"
  ];

  optional int32 sack = 7 [
    (fld_meta).default = "0",
    (fld_meta).description = "selective acknowledgements, 0 is disabled"
  ];

  optional int32 minrto = 8 [
    (fld_meta).default = "300",
    (fld_meta).description = "minimum retransmission timeout in milliseconds"
  ];

  optional bool ecn = 9 [
    (fld_meta).default = "False",
    (fld_meta).description = "Explicit congestion notification"
  ];

  message Congestion {
    enum Enum {
      unspecified = 0;
      none = 1;
      bbr = 2;
      reno = 3;
      vegas = 4;
      cubic = 5;
      tfrc = 6;
    }
  }
  optional Congestion.Enum congestion = 10 [
    (fld_meta).default = "Congestion.Enum.none",
    (fld_meta).description = "Congestion algorithm"
  ];
}

message Extra {
  option (msg_meta).description = "Description missing in models";

  optional string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional string value = 2 [
    (fld_meta).description = "Description missing in models"
  ];
}

message SetConfigRequest {
  Config config = 1;
}
message SetConfigResponse {
  optional ErrorDetails status_code_400 = 1;
  optional ErrorDetails status_code_500 = 2;
  optional WarningDetails status_code_200 = 3;
}

message GetConfigResponse {
  optional Config status_code_200 = 1;
}


service Openapi {
  option (svc_meta).description = "Description missing in models";

  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {
    option (rpc_meta).description = "Sets dataflow configuration resources.";
  }
  rpc GetConfig(google.protobuf.Empty) returns (GetConfigResponse) {
    option (rpc_meta).description = "Gets the current dataflow configuration.";
  }
}
