# Build process
name: CICD

on:
  push:
  workflow_dispatch:
    paths:
    - '!docs/**'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]

    steps:
      - name: Checkout source
        uses: actions/checkout@v2
        with:
          ref: ${{ github.head_ref }}

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Setup Go and protoc
        run: |
          python do.py setup_ext

      - name: Install dependencies
        run: |
          python do.py setup
          python do.py init

      - name: Run artifact generation
        run: |
          python do.py generate

      - name: Run tests
        run: |
          python do.py test

      - name: Generate html docs
        run: | 
          docker run -v "$(pwd)/artifacts/onex_model:/data" ajbalogh/redoc-cli bundle openapi.yaml -o openapi.html
          docker run -v "$(pwd)/artifacts/onex_fabricapi:/data" ajbalogh/redoc-cli bundle openapi.yaml -o openapi.html
          docker run -v "$(pwd)/artifacts/onex_dataflowapi:/data" ajbalogh/redoc-cli bundle openapi.yaml -o openapi.html
 
      - name: Archive generated artifacts
        uses: actions/upload-artifact@v2
        with:
          name: generated-artifacts
          path: |
            artifacts

      - name: Prep onexgo for auto-commit
        uses: actions/checkout@master
        with: 
          repository: open-network-experiments/onexgo
          token: ${{ secrets.ACTIONS_TOKEN }}
          path: ./onexgo

      - name: Commit auto generated content
        id: commit_generated
        run: |
          git config user.name "Github Actions Bot"
          git config user.email "actions@github.com"
          cp $(pwd)/artifacts/datamodel/openapi.yaml docs/onexdatamodel_openapi.yaml
          cp $(pwd)/artifacts/datamodel/*.proto docs
          cp $(pwd)/artifacts/fabric/openapi.yaml docs/onexfabric_openapi.yaml
          cp $(pwd)/artifacts/fabric/*.proto docs
          cp $(pwd)/artifacts/dataflow/openapi.yaml docs/onexdataflow_openapi.yaml
          cp $(pwd)/artifacts/dataflow/*.proto docs
          git add --force docs/*.yaml
          git add --force docs/*.proto
          if git status --porcelain | grep '_openapi.yaml\|_openapi.html\|.proto'; then
              git commit -m "Update auto generated content" 
              git push
          else
              echo "No change in auto generated content"
          fi

      - name: Update and commit onexgo auto generated content
        run: |
          cp -R $(pwd)/artifacts/onexgo/* ./onexgo
          cd ./onexgo
          git add .
          git config user.name "Github Actions Bot"
          git config user.email "actions@github.com"
          if git status --porcelain | grep '.go\|go.mod'; then
            git commit -m "Update auto generated content" 
            git push
          else
              echo "No change in auto generated content"
          fi

      - name: Get package version
        id: get_version
        run: |
          echo "::set-output name=version::v$(python do.py version)"

      - name: Check tag for current version
        uses: mukunku/tag-exists-action@v1.0.0
        id: check_tag
        with:
          tag: ${{ steps.get_version.outputs.version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
