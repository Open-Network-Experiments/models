// ONEx Fabric API 0.0.1
// License: MIT

syntax = "proto3";

package onexfabricapi;

option go_package = "github.com/open-network-experiments/onexgofabricapi/onexfabricapi";

import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";

message OpenApiMsgOpt {
  string description = 10;
}
extend google.protobuf.MessageOptions {
  optional OpenApiMsgOpt msg_meta = 60001;
}

message OpenApiFldOpt {
  string default = 10;
  string description = 20;
}
extend google.protobuf.FieldOptions {
  optional OpenApiFldOpt fld_meta = 60002;
}

message OpenApiSvcOpt {
  string description = 10;
}
extend google.protobuf.ServiceOptions {
  optional OpenApiSvcOpt svc_meta = 60003;
}

message OpenApiRpcOpt {
  string description = 10;
}
extend google.protobuf.MethodOptions {
  optional OpenApiRpcOpt rpc_meta = 60004;
}

message GlobalNamedObject {
  option (msg_meta).description = "Description missing in models";

  optional string name = 1 [
    (fld_meta).description = "Unique identifier for an object"
  ];
}

message ErrorDetails {
  option (msg_meta).description = "Description missing in models";

  repeated ErrorItem errors = 1 [
    (fld_meta).description = "Description missing in models"
  ];
}

message WarningDetails {
  option (msg_meta).description = "Description missing in models";

  repeated ErrorItem warnings = 1 [
    (fld_meta).description = "Description missing in models"
  ];
}

message ErrorItem {
  option (msg_meta).description = "Description missing in models";

  optional string message = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional int32 code = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  optional string detail = 3 [
    (fld_meta).description = "Description missing in models"
  ];
}

message Config {
  option (msg_meta).description = "Description missing in models";

  repeated Host hosts = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional Fabric fabric = 2 [
    (fld_meta).description = "Description missing in models"
  ];
}

message Host {
  option (msg_meta).description = "Description missing in models";

  string name = 1 [
    (fld_meta).description = "The name, uniquely identifying the host"
  ];

  string address = 2 [
    (fld_meta).description = "The test address of the host"
  ];

  optional int32 prefix = 3 [
    (fld_meta).default = "24",
    (fld_meta).description = "The prefix of the host"
  ];

  message HostType {
    enum Enum {
      unspecified = 0;
      external = 1;
      internal_traffic_sink = 2;
    }
  }
  optional HostType.Enum host_type = 4 [
    (fld_meta).description = "Optional host type, if fabric is rendered on physical box.\n- external for hosts/servers physically connected to front panel ports\n- internal_traffic_sink for an emulated server that acts as a traffic sink (i.e. packets sent to its IP address will be routed through the fabric)"
  ];
}

message Fabric {
  option (msg_meta).description = "Description missing in models";

  message Choice {
    enum Enum {
      unspecified = 0;
      clos = 1;
    }
  }
  optional Choice.Enum choice = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional FabricClos clos = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated FabricQosProfile qos_profiles = 3 [
    (fld_meta).description = "A list of Quality of Service (QoS) profiles"
  ];
}

message FabricClos {
  option (msg_meta).description = "An emulation of a multistage switch topology. When folded, results in a topology with (up to) 3 tiers identified as \nspine, pod and tor tier.";

  optional FabricSpine spine = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated FabricPod pods = 2 [
    (fld_meta).description = "The pods in the topology."
  ];

  repeated SwitchHostLink host_links = 3 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated FabricPodProfile pod_profiles = 4 [
    (fld_meta).description = "A list of pod profiles"
  ];

  repeated FabricTorProfile tor_profiles = 5 [
    (fld_meta).description = "A list of ToR switch profiles"
  ];

  optional int32 parallel_fabric_count = 6 [
    (fld_meta).default = "1",
    (fld_meta).description = "Number of parallel fabrics (aka fabric colors). Spine and pod switches \nare fully meshed within a fabric"
  ];
}

message FabricSpine {
  option (msg_meta).description = "Description missing in models";

  optional int32 count = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "The number of spines to be created with each spine sharing the same\ndownlink_ecmp_mode and qos_profile_name properties."
  ];

  message DownlinkEcmpMode {
    enum Enum {
      unspecified = 0;
      random_spray = 1;
      hash_3_tuple = 2;
      hash_5_tuple = 3;
    }
  }
  optional DownlinkEcmpMode.Enum downlink_ecmp_mode = 2 [
    (fld_meta).description = "The algorithm for packet distribution over ECMP links.\n- random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4 but a different resulting RTAG7 hash mode"
  ];

  optional string qos_profile_name = 3 [
    (fld_meta).description = "The name of a qos profile shared by the spines.\n\nx-constraint:\n- #/components/schemas/QosProfile/properties/name\n"
  ];
}

message FabricPod {
  option (msg_meta).description = "Description missing in models";

  optional int32 count = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "The number of pods that will share the same profile"
  ];

  optional string pod_profile_name = 2 [
    (fld_meta).description = "The pod profile associated with the pod(s).\n\nx-constraint:\n- #/components/schemas/PodProfile/properties/name\n"
  ];
}

message FabricPodProfile {
  option (msg_meta).description = "Description missing in models";

  optional string name = 1 [
    (fld_meta).description = "Uniquely identifies a pod profile"
  ];

  optional FabricPodSwitch pod_switch = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated FabricTor tors = 3 [
    (fld_meta).description = "The ToRs in the pod"
  ];

  optional string pod_to_spine_oversubscription = 4 [
    (fld_meta).description = "Oversubscription ratio of the pod switches"
  ];
}

message FabricPodSwitch {
  option (msg_meta).description = "Description missing in models";

  optional int32 count = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "Description missing in models"
  ];

  message UplinkEcmpMode {
    enum Enum {
      unspecified = 0;
      random_spray = 1;
      hash_3_tuple = 2;
      hash_5_tuple = 3;
    }
  }
  optional UplinkEcmpMode.Enum uplink_ecmp_mode = 2 [
    (fld_meta).description = "The algorithm for packet distribution over ECMP links.\n- random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4 but a different resulting RTAG7 hash mode"
  ];

  message DownlinkEcmpMode {
    enum Enum {
      unspecified = 0;
      random_spray = 1;
      hash_3_tuple = 2;
      hash_5_tuple = 3;
    }
  }
  optional DownlinkEcmpMode.Enum downlink_ecmp_mode = 3 [
    (fld_meta).description = "The algorithm for packet distribution over ECMP links.\n- random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4 but a different resulting RTAG7 hash mode"
  ];

  optional string qos_profile_name = 4 [
    (fld_meta).description = "The name of a qos profile associated with the switches in this pod.\n\nx-constraint:\n- #/components/schemas/QosProfile/properties/name\n"
  ];
}

message FabricTor {
  option (msg_meta).description = "Description missing in models";

  optional int32 count = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "number of ToR switches that will share the same profile"
  ];

  optional string tor_profile_name = 2 [
    (fld_meta).description = "The names of ToR profiles associated with the ToR switch(es)\n\nx-constraint:\n- #/components/schemas/TorProfile/properties/name\n"
  ];
}

message FabricTorProfile {
  option (msg_meta).description = "Description missing in models";

  optional string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  message TorMode {
    enum Enum {
      unspecified = 0;
      layer2 = 1;
      layer3 = 2;
    }
  }
  optional TorMode.Enum tor_mode = 2 [
    (fld_meta).description = "ToR switch mode"
  ];

  message UplinkEcmpMode {
    enum Enum {
      unspecified = 0;
      random_spray = 1;
      hash_3_tuple = 2;
      hash_5_tuple = 3;
    }
  }
  optional UplinkEcmpMode.Enum uplink_ecmp_mode = 3 [
    (fld_meta).description = "The algorithm for packet distribution over ECMP links.\n- random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4 but a different resulting RTAG7 hash mode"
  ];

  optional string qos_profile_name = 4 [
    (fld_meta).description = "The name of a qos profile associated with the ToR switch(es)\n\nx-constraint:\n- #/components/schemas/QosProfile/properties/name\n"
  ];

  optional string tor_to_pod_oversubscription = 5 [
    (fld_meta).description = "The oversubscription ratio of the ToR switch(es)"
  ];
}

message FabricQosProfile {
  option (msg_meta).description = "Description missing in models";

  string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional FabricQosProfileIngressAdmission ingress_admission = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  optional FabricQosProfileScheduler scheduler = 3 [
    (fld_meta).description = "Description missing in models"
  ];

  optional FabricQosProfilePacketClassification packet_classification = 4 [
    (fld_meta).description = "Description missing in models"
  ];

  optional FabricQosProfileWred wred = 5 [
    (fld_meta).description = "Description missing in models"
  ];
}

message FabricQosProfileIngressAdmission {
  option (msg_meta).description = "Description missing in models";

  optional int32 reserved_buffer_bytes = 1 [
    (fld_meta).default = "0",
    (fld_meta).description = "Buffer space (in bytes) reserved for each port that this Qos profile applies to"
  ];

  optional int32 shared_buffer_bytes = 2 [
    (fld_meta).default = "0",
    (fld_meta).description = "Amount of shared buffer space (in bytes) available"
  ];

  repeated string priority_list = 3 [
    (fld_meta).description = "List of priorities for which the buffer sizes should be applied"
  ];
}

message FabricQosProfileScheduler {
  option (msg_meta).description = "Description missing in models";

  message SchedulerMode {
    enum Enum {
      unspecified = 0;
      strict_priority = 1;
      weighted_round_robin = 2;
    }
  }
  optional SchedulerMode.Enum scheduler_mode = 1 [
    (fld_meta).description = "The queue scheduling discipline "
  ];

  repeated int32 weight_list = 2 [
    (fld_meta).description = "A list of egress queue weights for weighted round robin scheduler mode"
  ];
}

message FabricQosProfilePacketClassification {
  option (msg_meta).description = "Description missing in models";

  optional FabricQosProfilePacketClassificationMap map_dscp_to_traffic_class = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional FabricQosProfilePacketClassificationMap map_traffic_class_to_queue = 2 [
    (fld_meta).description = "Description missing in models"
  ];
}

message FabricQosProfilePacketClassificationMap {
  option (msg_meta).description = "Description missing in models";
}

message FabricQosProfileWred {
  option (msg_meta).description = "WRED (weighted random early detection) configuration";

  repeated string queue_list = 1 [
    (fld_meta).description = "List of queues for which WRED is enabled"
  ];

  optional bool ecn_marking_enabled = 2 [
    (fld_meta).default = "False",
    (fld_meta).description = "Description missing in models"
  ];

  optional int32 min_threshold_bytes = 3 [
    (fld_meta).default = "1",
    (fld_meta).description = "Egress queue threshold beyond which packets will be droppes or marked"
  ];

  optional int32 max_threshold_bytes = 4 [
    (fld_meta).default = "2",
    (fld_meta).description = "Egress queue threshold beyond which packets will be droppes or marked"
  ];

  optional int32 max_probability_percent = 5 [
    (fld_meta).default = "100",
    (fld_meta).description = "Probability of dropping/marking packets at max threshold"
  ];
}

message SwitchHostLink {
  option (msg_meta).description = "The ingress point of a host which is the index of a spine, pod or tor switch.";

  string host_name = 1 [
    (fld_meta).description = "TBD\n\nx-constraint:\n- #components/schemas/Host/properties/name\n"
  ];

  optional int32 front_panel_port = 2 [
    (fld_meta).description = "Optional front panel port number, if fabric is rendered on physical box"
  ];

  message Choice {
    enum Enum {
      unspecified = 0;
      spine = 1;
      pod = 2;
      tor = 3;
    }
  }
  optional Choice.Enum choice = 3 [
    (fld_meta).default = "Choice.Enum.tor",
    (fld_meta).description = "Description missing in models"
  ];

  optional int32 spine = 4 [
    (fld_meta).description = "One based index of the spine switch based on the number of spines \nconfigured in the clos topology."
  ];

  optional SwitchHostLinkSwitchRef pod = 5 [
    (fld_meta).description = "Description missing in models"
  ];

  optional SwitchHostLinkSwitchRef tor = 6 [
    (fld_meta).description = "Description missing in models"
  ];
}

message SwitchHostLinkSwitchRef {
  option (msg_meta).description = "Location of the switch based on pod and switch index";

  optional int32 pod_index = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "One-based index of the pod based on the number of pods in the fabric"
  ];

  optional int32 switch_index = 2 [
    (fld_meta).default = "1",
    (fld_meta).description = "One-based index of the pod or ToR switch in the indicated pod"
  ];
}

message SetConfigRequest {
  Config config = 1;
}
message SetConfigResponse {
  optional ErrorDetails status_code_400 = 1;
  optional ErrorDetails status_code_500 = 2;
  optional WarningDetails status_code_200 = 3;
}

message GetConfigResponse {
  optional Config status_code_200 = 1;
  optional ErrorDetails status_code_400 = 2;
  optional ErrorDetails status_code_500 = 3;
}


service Openapi {
  option (svc_meta).description = "Description missing in models";

  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {
    option (rpc_meta).description = "Sets the fabric configuration.";
  }
  rpc GetConfig(google.protobuf.Empty) returns (GetConfigResponse) {
    option (rpc_meta).description = "Gets the fabric configuration.";
  }
}
