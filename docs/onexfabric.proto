// Distributed System Emulator Fabric API and Data Models 0.0.1
// License: MIT

syntax = "proto3";

package onexfabric;

option go_package = "github.com/ajbalogh/open-network-experiments/artifacts/gofabric/onexfabric";

import "google/protobuf/descriptor.proto";
import "google/protobuf/empty.proto";

message OpenApiMsgOpt {
  string description = 10;
}
extend google.protobuf.MessageOptions {
  optional OpenApiMsgOpt msg_meta = 60001;
}

message OpenApiFldOpt {
  string default = 10;
  string description = 20;
}
extend google.protobuf.FieldOptions {
  optional OpenApiFldOpt fld_meta = 60002;
}

message OpenApiSvcOpt {
  string description = 10;
}
extend google.protobuf.ServiceOptions {
  optional OpenApiSvcOpt svc_meta = 60003;
}

message OpenApiRpcOpt {
  string description = 10;
}
extend google.protobuf.MethodOptions {
  optional OpenApiRpcOpt rpc_meta = 60004;
}

message GlobalNamedObject {
  option (msg_meta).description = "Description missing in models";

  optional string name = 1 [
    (fld_meta).description = "Unique identifier for an object"
  ];
}

message ErrorDetails {
  option (msg_meta).description = "Description missing in models";

  repeated string errors = 1 [
    (fld_meta).description = "Description missing in models"
  ];
}

message WarningDetails {
  option (msg_meta).description = "Description missing in models";

  repeated string warnings = 1 [
    (fld_meta).description = "Description missing in models"
  ];
}

message Config {
  option (msg_meta).description = "The resources that define a fabric configuration.";

  optional string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated Host hosts = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated QosProfile qos_profiles = 3 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated RackProfile rack_profiles = 4 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated PodProfile pod_profiles = 5 [
    (fld_meta).description = "Description missing in models"
  ];

  optional Topology topology = 6 [
    (fld_meta).description = "Description missing in models"
  ];
}

message Topology {
  option (msg_meta).description = "Description missing in models";

  message Choice {
    enum Enum {
      unspecified = 0;
      spine_pod_rack = 1;
    }
  }
  Choice.Enum choice = 1 [
    (fld_meta).description = "The type of topology to emulate."
  ];

  optional SpinePodRack spine_pod_rack = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated Annotations annotations = 3 [
    (fld_meta).description = "Description missing in models"
  ];

  optional string name = 4 [
    (fld_meta).description = "Unique name of the emulated topology"
  ];

  optional string description = 5 [
    (fld_meta).description = "A textual description of the emulated topology"
  ];
}

message RackProfile {
  option (msg_meta).description = "Description missing in models";

  optional string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional int32 host_capacity = 2 [
    (fld_meta).default = "1",
    (fld_meta).description = "Description missing in models"
  ];

  optional string oversubscription = 3 [
    (fld_meta).description = "Rack to pod over subscription ratio\nRatio of bandwidth in to bandwidth out\nlinks in X speed : links out X speed\nimplementation will auto calculate the number of links based\n1:1 2:1"
  ];

  message TorMode {
    enum Enum {
      unspecified = 0;
      layer2 = 1;
      layer3 = 2;
    }
  }
  optional TorMode.Enum tor_mode = 4 [
    (fld_meta).description = "The top of rack switch mode\nThe switch mode connectivity.\n- layer2 hosts on the same switch only have layer2 connectivity\n- layer3 hosts on the same switch only have layer3 connectivity"
  ];

  optional string qos_profile_name = 5 [
    (fld_meta).description = "The name of a qos profile associated with this top of rack profile.\n\nx-constraint:\n- #/components/schemas/QosProfile/properties/name\n"
  ];

  repeated Annotations annotations = 6 [
    (fld_meta).description = "Description missing in models"
  ];
}

message Host {
  option (msg_meta).description = "Description missing in models";

  string name = 1 [
    (fld_meta).description = "The unique name of the host"
  ];

  optional int32 front_panel_port = 2 [
    (fld_meta).description = "The number of the port on the front panel"
  ];

  string address = 3 [
    (fld_meta).description = "The address of the host"
  ];

  optional int32 prefix = 4 [
    (fld_meta).default = "24",
    (fld_meta).description = "The prefix of the host"
  ];

  optional Link ingress = 5 [
    (fld_meta).description = "Description missing in models"
  ];

  message Type {
    enum Enum {
      unspecified = 0;
      external = 1;
      internal_traffic_sink = 2;
    }
  }
  optional Type.Enum type = 6 [
    (fld_meta).default = "Type.Enum.external",
    (fld_meta).description = "The type of host.\n- external is a normal host/server that is physically connnected to a front panel port \n- internal_traffic_sink is a server that acts as a traffic sink where packets sent to its address will be routed through the fabric"
  ];

  optional Layer1 layer1 = 7 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated Annotations annotations = 8 [
    (fld_meta).description = "A list of name/value annotations"
  ];
}

message Link {
  option (msg_meta).description = "The ingress point of a host which is the index of a spine switch, \na pod/rack switch.";

  message Choice {
    enum Enum {
      unspecified = 0;
      spine = 1;
      pod = 2;
      rack = 3;
    }
  }
  optional Choice.Enum choice = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional int32 spine = 2 [
    (fld_meta).description = "One based index of the spine switch based on the number of spines \nconfigured in the spine_pod_rack topology."
  ];

  optional PodRackLink pod = 3 [
    (fld_meta).description = "Description missing in models"
  ];

  optional PodRackLink rack = 4 [
    (fld_meta).description = "Description missing in models"
  ];
}

message PodRackLink {
  option (msg_meta).description = "Location of the switch based on the number of pods and rack switches.";

  optional int32 pod_index = 1 [
    (fld_meta).description = "Index of the pod switch based on the number of pods and pod switches."
  ];

  optional int32 switch_index = 2 [
    (fld_meta).description = "Index of the rack switch based on the number of pods and rack switches."
  ];
}

message Layer1 {
  option (msg_meta).description = "Description missing in models";

  message Choice {
    enum Enum {
      unspecified = 0;
      auto_negotiation = 1;
      manual_negotiation = 2;
    }
  }
  optional Choice.Enum choice = 1 [
    (fld_meta).default = "Choice.Enum.auto_negotiation",
    (fld_meta).description = "Description missing in models"
  ];

  optional AutoNegotiation auto_negotiation = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  optional ManualNegotiation manual_negotiation = 3 [
    (fld_meta).description = "Description missing in models"
  ];
}

message AutoNegotiation {
  option (msg_meta).description = "Description missing in models";

  optional bool advertise_fec = 1 [
    (fld_meta).default = "True",
    (fld_meta).description = "Description missing in models"
  ];
}

message ManualNegotiation {
  option (msg_meta).description = "Description missing in models";

  message FecMode {
    enum Enum {
      unspecified = 0;
      none = 1;
      reed_solomon = 2;
    }
  }
  optional FecMode.Enum fec_mode = 1 [
    (fld_meta).description = "Description missing in models"
  ];
}

message QosProfile {
  option (msg_meta).description = "Description missing in models";

  optional string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated Annotations dscp_to_traffic_class = 2 [
    (fld_meta).description = "A list of name/value key pairs"
  ];
}

message SpinePodRack {
  option (msg_meta).description = "An emulation of a spine/pod/rack topology";

  repeated Spine spines = 1 [
    (fld_meta).description = "The spines in the topology."
  ];

  repeated Pod pods = 2 [
    (fld_meta).description = "The pods in the topology."
  ];

  optional int32 parallel_fabric_count = 3 [
    (fld_meta).default = "1",
    (fld_meta).description = "Description missing in models"
  ];
}

message Spine {
  option (msg_meta).description = "Description missing in models";

  optional int32 count = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "The number of spines to be created with each spine sharing the same\ndownlink_ecmp_mode and qos_profile_name properties."
  ];

  message DownlinkEcmpMode {
    enum Enum {
      unspecified = 0;
      static_hash_ipv4_l4 = 1;
      random_spray = 2;
      hash_3_tuple = 3;
      hash_5_tuple = 4;
    }
  }
  optional DownlinkEcmpMode.Enum downlink_ecmp_mode = 2 [
    (fld_meta).description = "The algorithm for packet distribution over ECMP links.\n- static_hash_ipv4_l4 is a 5 tuple hash of ipv4 src, dst, protocol and tcp or udp src, dst port\n- random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4 but a different resulting RTAG7 hash mode"
  ];

  optional string qos_profile_name = 3 [
    (fld_meta).description = "The name of a qos profile shared by the spines.\n\nx-constraint:\n- #/components/schemas/QosProfile/properties/name\n"
  ];
}

message Pod {
  option (msg_meta).description = "Description missing in models";

  optional int32 count = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "The number of pods that will share the same profile"
  ];

  repeated string pod_profile_name = 2 [
    (fld_meta).description = "The pod profile associated with this pod."
  ];
}

message PodProfile {
  option (msg_meta).description = "Description missing in models";

  optional string name = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional PodSwitch pod_switch = 2 [
    (fld_meta).description = "Description missing in models"
  ];

  optional PodRack rack = 3 [
    (fld_meta).description = "Description missing in models"
  ];

  repeated Annotations annotations = 4 [
    (fld_meta).description = "Description missing in models"
  ];
}

message PodSwitch {
  option (msg_meta).description = "Description missing in models";

  optional int32 count = 1 [
    (fld_meta).default = "1",
    (fld_meta).description = "Description missing in models"
  ];

  message UplinkEcmpMode {
    enum Enum {
      unspecified = 0;
      static_hash_ipv4_l4 = 1;
      random_spray = 2;
      hash_3_tuple = 3;
      hash_5_tuple = 4;
    }
  }
  optional UplinkEcmpMode.Enum uplink_ecmp_mode = 2 [
    (fld_meta).description = "The algorithm for packet distribution over ECMP links.\n- static_hash_ipv4_l4 is a 5 tuple hash of ipv4 src, dst, protocol and tcp or udp src, dst port\n- random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4 but a different resulting RTAG7 hash mode"
  ];

  message DownlinkEcmpMode {
    enum Enum {
      unspecified = 0;
      static_hash_ipv4_l4 = 1;
      random_spray = 2;
      hash_3_tuple = 3;
      hash_5_tuple = 4;
    }
  }
  optional DownlinkEcmpMode.Enum downlink_ecmp_mode = 3 [
    (fld_meta).description = "The algorithm for packet distribution over ECMP links.\n- static_hash_ipv4_l4 is a 5 tuple hash of ipv4 src, dst, protocol and tcp or udp src, dst port\n- random_spray randomly puts each packet on an ECMP member links \n- hash_3_tuple is a 3 tuple hash of ipv4 src, dst, protocol\n- hash_5_tuple is static_hash_ipv4_l4 but a different resulting RTAG7 hash mode"
  ];

  optional string qos_profile_name = 4 [
    (fld_meta).description = "The name of a qos profile associated with this pod switch.\n\nx-constraint:\n- #/components/schemas/QosProfile/properties/name\n"
  ];
}

message PodRack {
  option (msg_meta).description = "Description missing in models";

  repeated string rack_profile_names = 1 [
    (fld_meta).description = "The names of rack profiles associated with this rack."
  ];
}

message Annotations {
  option (msg_meta).description = "Description missing in models";

  optional string key = 1 [
    (fld_meta).description = "Description missing in models"
  ];

  optional string value = 2 [
    (fld_meta).description = "Description missing in models"
  ];
}

message SetConfigRequest {
  Config config = 1;
}
message SetConfigResponse {
  optional ErrorDetails status_code_400 = 1;
  optional ErrorDetails status_code_500 = 2;
  optional WarningDetails status_code_200 = 3;
}

message GetConfigResponse {
  optional Config status_code_200 = 1;
}


service Openapi {
  option (svc_meta).description = "Description missing in models";

  rpc SetConfig(SetConfigRequest) returns (SetConfigResponse) {
    option (rpc_meta).description = "Sets the fabric configuration.";
  }
  rpc GetConfig(google.protobuf.Empty) returns (GetConfigResponse) {
    option (rpc_meta).description = "Gets the fabric configuration.";
  }
}
