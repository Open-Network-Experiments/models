components:
  schemas:
    Dataflow:
      type: object
      properties:
        host_management:
          type: array
          items:
            $ref: './host_management.yaml#/components/schemas/Dataflow.HostManagement'
        workload:
          description: |-
            The workload items making up the dataflow
          type: array
          items:
            $ref: "#/components/schemas/Dataflow.WorkloadItem"
        flow_profiles: 
          description: |-
            foo
          type: array
          items:
            $ref: "#/components/schemas/Dataflow.FlowProfile"

    Dataflow.FlowProfile:
      type: object
      required: [name, data_size]
      properties:
        name:
          type: string
        data_size:
          type: integer
        mtu:
          type: integer
          description: Maximum Transmission Unit
          default: 1500

        choice:
          description: |-
            RDMA traffic or traditional TCP/IP
          type: string
          enum: [rdma, tcpip]
        rdma: 
          $ref: "#/components/schemas/Dataflow.FlowProfile.RdmaStack"
        tcpip:
          $ref: "#/components/schemas/Dataflow.FlowProfile.TcpIpStack"
        
        

    Dataflow.FlowProfile.RdmaStack:
      type: object
      properties:
        choice:
          type: string
          enum: [rocev2]
        rocev2:
          $ref: "#/components/schemas/Dataflow.FlowProfile.RdmaStack.RoceV2"
    
    Dataflow.FlowProfile.RdmaStack.RoceV2:
      type: object
      properties:
        verb:
          description: read or write command
          type: string
          enum: [write, read]
          default: write
        bidirectional:
          description: whether data is sent both ways
          type: boolean
          default: false
        iterations:
          type: integer
          description: how many times to send the message
          default: 1
        

    Dataflow.FlowProfile.TcpIpStack:
      type: object
      properties:
        ip:
          $ref: "#/components/schemas/Dataflow.FlowProfile.TcpIpStack.Ip"
        choice:
          description: layer4 protocol selection
          type: string
          enum: [tcp, udp]
        tcp:
          $ref: "#/components/schemas/Dataflow.FlowProfile.L4Protocol.Tcp"
        udp:
          $ref: "#/components/schemas/Dataflow.FlowProfile.L4Protocol.Udp"


        

    Dataflow.FlowProfile.TcpIpStack.Ip:
      type: object
      properties:
        dscp:
          type: integer
          description: differentiated services code point

    Dataflow.FlowProfile.L4Protocol.Tcp:
      type: object
      properties:
        congestion_algorithm:
          # type: integer
          x-include:
            - "#/components/schemas/TcpCongestionAlgorithm"
          default: cubic
        initcwnd:
          description: initial congestion window
          type: integer
        send_buf:
          description: send buffer size
          type: integer
        receive_buf:
          description: receive buffer size
          type: integer
        delayed_ack:
          description: delayed acknowledgment
          type: integer
        selective_ack:
          description: selective acknowledgment
          type: boolean
        min_rto:
          description: minimum retransmission timeout
          type: integer
        mss:
          type: integer
          description: Maximum Segment Size
          default: 1500
        ecn:
          description: early congestion notification
          type: boolean
        enable_timestamp:
          description: enable tcp timestamping
          type: boolean
        destination_port:
          $ref: "#/components/schemas/L4PortRange"
        source_port:
          $ref: "#/components/schemas/L4PortRange"
          
    TcpCongestionAlgorithm:
      description: |-
        The TCP congestion algorithm:
        bbr - Bottleneck Bandwidth and Round-trip propagation time
        dctcp - Data center TCP
        cubic - cubic window increase function
        reno - TCP New Reno
      type: string
      enum: [bbr, dctcp, cubic, reno]

    L4PortRange:
      description: Layer4 protocol source or destination port values
      type: object
      properties:
        choice:
          description: 
          type: string
          enum: [single_value, range]
        single_value:
          $ref: "#/components/schemas/L4PortRange.SingleValue"
        range:
          $ref: "#/components/schemas/L4PortRange.Range"

    L4PortRange.SingleValue:
      type: object
      properties:
        value: 
          type: integer
          default: 1
    L4PortRange.Range:
      type: object
      properties:
        start_value:
          type: integer
          default: 1
        increment:
          type: integer
          default: 1
          minimum: 1

    Dataflow.FlowProfile.L4Protocol.Udp:
      type: object

    Dataflow.WorkloadItem:
      type: object
      required: [name, choice]
      properties:
        name:
          description: |-
            uniquely identifies the workload item
          type: string
        choice:
          description: |-
            The type of workflow item
          type: string
          enum: [scatter, gather, all_reduce, loop, compute, broadcast, all_to_all]
        scatter:
          $ref: "#/components/schemas/Dataflow.ScatterWorkload"
        gather:
          $ref: "#/components/schemas/Dataflow.GatherWorkload"
        loop:
          $ref: "#/components/schemas/Dataflow.LoopWorkload"
        compute:
          $ref: "#/components/schemas/Dataflow.ComputeWorkload"
        all_reduce:
          $ref: "#/components/schemas/Dataflow.AllReduceWorkload"
        broadcast:
          $ref: "#/components/schemas/Dataflow.BroadcastWorkload"
        all_to_all:
          $ref: "#/components/schemas/Dataflow.AlltoallWorkload"

    Dataflow.ScatterWorkload:
      type: object
      properties:
        sources:
          description: |-
            list of host names, indicating the originator of the data
          type: array
          items:
            type: string
        destinations:
          description: |-
            list of host names, indicating the destination of the data
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string

    Dataflow.BroadcastWorkload:
      type: object
      properties:
        sources:
          description: |-
            list of host names, indicating the originator of the data
          type: array
          items:
            type: string
        destinations:
          description: |-
            list of host names, indicating the destination of the data
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string

    Dataflow.GatherWorkload:
      type: object
      properties:
        sources:
          description: |-
            list of host names, indicating the originator of the data
          type: array
          items:
            type: string
        destinations:
          description: |-
            list of host names, indicating the destination of the data
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string

    Dataflow.AllReduceWorkload:
      type: object
      properties:
        nodes:
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string
        type:
          description: |-
            type of all reduce
          type: string
          enum: [ring, tree, butterfly]
          default: ring

    Dataflow.AlltoallWorkload:
      type: object
      description: creates full-mesh flows between all nodes
      properties:
        nodes:
          type: array
          items:
            type: string
        flow_profile_name:
          description: |-
            flow profile reference
          type: string

    Dataflow.ComputeWorkload:
      type: object
      properties:
        nodes:
          type: array
          items:
            type: string
        choice:
          description: |-
            type of compute
          type: string
          enum: [simulated]
        simulated:
          $ref: "#/components/schemas/Dataflow.SimulatedComputeWorkload"
    
    Dataflow.SimulatedComputeWorkload:
      type: object
      properties:
        duration:
          description: |-
            duration of the simulated compute workload in seconds
          type: number

    Dataflow.LoopWorkload:
      type: object
      properties:
        iterations:
          description: |-
            number of iterations in the loop
          type: integer
        children:
          description: |-
            list of workload items that are executed in this loop
          type: array
          items:
            $ref: "#/components/schemas/Dataflow.WorkloadItem"
